#!/bin/bash
# Pull from host

. /srv/dcp/bin/dcp_common

usage()
{
    cat <<EOF
    usage: $1 [-f] [-v] (-a | -h <hosts_list> | <host> )
       Pull package manifest and files tracked by dcp from host
       -f  Pull even if there are uncommitted changes since the last pull
       -v  Say which files are being retrieved
       -a  All hosts
       -h  <hosts_list> is a file containing list of hosts to push to
EOF
    return 0
}

while getopts "fvah:" opt; do
    case $opt in
	f ) force=1;;
	v ) verbose="--itemize-changes";;
	a ) host_list=$(cd $HOST_STORE; find * -maxdepth 0  -type d);;
	h ) host_list=$(cat $OPTARG);;
	\? ) usage
            exit 1;;
	: ) echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1;;
	* ) usage
            exit 1;;
    esac
done
shift $(($OPTIND - 1))

# There must be a host
if [[ $# -eq 0 && -z "$host_list" ]]; then
    echo "No <host> provided"
    usage
    exit 1
fi

pull_ () {
    host=$1
    shift

#    if ! ping -c1 $host >/dev/null 2>&1 ; then
#	echo $host not available
#	return
#    fi

    cd ${HOST_STORE}/$host

    # Check git status
    if [[ -n "$(git status --porcelain 2>&1)" ]]; then
	echo Some local changes not comitted for $host from last pull
	if [[ -z "$force" ]]; then
	    git status --porcelain
	    echo "Aborting for $host"
	    return
	fi
	echo "Forcing a pull anyway, as requested"
    fi

    # Get an updated manifest from the host
    ssh -x $host dpkg-query -W 2\>/dev/null > manifest

    # Now get the latest files
    rsync_files_ $verbose

    # and the latest dirs
    rsync_dirs_ $verbose
}

# Which hosts need a pull
if [[ -n $host_list ]]; then
    for host in $host_list; do
	pull_ $host "$@"
    done
else
    pull_ "$@"
fi
